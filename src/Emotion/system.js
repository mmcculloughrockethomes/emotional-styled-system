import { space, color } from "./config";
import theme from "./theme";

export function parseStyleProps(props) {
	const styleProps = {};
	const forwardProps = {};

	Object.entries(props).forEach((entry) => {
		const [key, value] = entry;
		if (isStyleProp(key)) {
			const [cssProperty, cssValue] = getStylePropCssVar(key, value);
			styleProps[cssProperty] = cssValue;
		} else {
			forwardProps[key] = value;
		}
	});

	return [styleProps, forwardProps];
}

const getAllStyleProps = () => ({
	...space,
	...color,
});

const isStyleProp = (propKey) => {
	const allStyleProps = getAllStyleProps();
	return allStyleProps.hasOwnProperty(propKey) ? allStyleProps[propKey] : false;
};

/**
 * Style Props tools
 *
 * WIP
 *
 * covert {mb: "36"} to {marginBottom: "var(--rh-space-36)"}
 * covert {color: "sprk.purple.deep"} to {color: "var(--rh-colors-sprk_purple_dark)"}
 */
export function getStylePropCssVar(propKey, propValue) {
	const allStyleProps = getAllStyleProps();

	const isValueInTheme = isValidThemeValue(
		allStyleProps[propKey].scale,
		propValue
	);

	if (!isValueInTheme) {
		throwWarning("invalidThemeValue", [propValue]);
	}

	const CSSVarFunctionString = getCSSVarFunctionString(
		allStyleProps[propKey].scale,
		propValue
	);

	return [allStyleProps[propKey].property, CSSVarFunctionString];
}

/**
 * Theme CSS var tools
 */

/**
 * Validates that a given themeKey and themeValueKey are found within the theme
 */
export function isValidThemeValue(themeKey, themeValueKey) {
	return Boolean(theme?.[themeKey]?.[themeValueKey]);
}

/**
 * Contains the "template" for generating CSS variables given a themeKey and themeValueKey
 * Returns a string
 */
export function getCSSVarName(themeKey, themeValueKey) {
	if (!isValidThemeValue(themeKey, themeValueKey)) return false;
	return `--rh-${themeKey}-${themeValueKey}`.replace(/\./gi, "_");
}

/**
 * Returns a value from the theme given a themeKey and themeValueKey
 */
export function getThemeValue(themeKey, themeValueKey) {
	if (!isValidThemeValue(themeKey, themeValueKey)) return false;
	const themeValue =
		typeof theme[themeKey][themeValueKey] === "object"
			? theme[themeKey][themeValueKey].value
			: theme[themeKey][themeValueKey];
	return themeValue;
}

/**
 * Returns a CSS value - using CSS var function
 */
export function getCSSVarFunctionString(themeKey, themeValueKey) {
	if (!isValidThemeValue(themeKey, themeValueKey)) return false;
	const varName = getCSSVarName(themeKey, themeValueKey);
	return `var(${varName})`;
}

/**
 * Return a string representing a CSS property/value. (using CSS var function)
 */
export function getThemeRuleCSSVarString(themeKey, themeValueKey) {
	if (!isValidThemeValue(themeKey, themeValueKey)) return false;

	const varName = getCSSVarName(themeKey, themeValueKey);
	const varValue = getThemeValue(themeKey, themeValueKey);

	return `${varName}: ${varValue};`;
}

/**
 * Returns an array of CSS variables generated by the theme
 */
export function getThemeCSSVars() {
	let cssVars = [];
	for (let themeKey in theme) {
		for (let themeValueKey in theme[themeKey]) {
			const rule = getThemeRuleCSSVarString(themeKey, themeValueKey);
			cssVars.push(rule);
		}
	}
	return cssVars;
}

/**
 * Playing around...
 */
const generateErrorMessage = (staticTags, ...tags) => {
	let str = [staticTags[0]];
	for (let i = 0; i < tags.length; i++) {
		str.push(tags[i] + staticTags[i + 1]);
	}
	return str.join("");
};

/**
 * Error Messages
 */
const getErrorMessage = {
	invalidStyleProp: (values) => {
		const [styleProp] = values;
		return generateErrorMessage`Invalid style prop ${styleProp}.`;
	},
	invalidThemeValue: (values) => {
		const [themeValue] = values;
		return generateErrorMessage`Invalid style prop value ${themeValue}.`;
	},
};

const throwWarning = (errorType, values) => {
	const message = getErrorMessage[errorType](values);
	console.warn(message);
};

/**
 * TODO: Add psuedo selectors
 *
 * @chakra-ui/styled-system/src/pseudos.ts
 */
