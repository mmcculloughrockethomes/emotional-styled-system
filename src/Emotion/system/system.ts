import { space, color } from "./config";
import { StyleProps } from "./system-types";
import theme, { themeType, themeValue } from "../theme";

export interface anyReactProps {
  [x: string]: unknown;
}

// TYPES: This could be any regular props
export function parseStyleProps(props: anyReactProps) {
  const styleProps = {};
  const forwardProps = {};

  Object.entries(props).forEach((entry) => {
    const [key, value] = entry;
    if (isStyleProp(key)) {
      const [cssProperty, cssValue] = getStylePropCssVar(key, value);
      styleProps[cssProperty] = cssValue;
    } else {
      forwardProps[key] = value;
    }
  });

  return [styleProps, forwardProps];
}

interface stylePropsConfigItem {
  property: string;
  scale?: string;
  transform?: Function;
}
export interface stylePropsConfigTyps {
  [x: string]: stylePropsConfigItem;
}

const getAllStyleProps = (): stylePropsConfigTyps => {
  return {
    ...space,
    ...color,
  };
};

const isStyleProp = (propKey: string): Boolean => {
  const allStyleProps = {
    ...space,
    ...color,
  };
  const allStylePropKeys = Object.keys(allStyleProps);
  return propKey in allStylePropKeys;
};

/**
 * Style Props tools
 *
 * WIP
 *
 * covert {mb: "36"} to ['marginBottom', "var(--rh-space-36)"]
 * covert {color: "sprk.purple.deep"} to ['color', "var(--rh-colors-sprk_purple_dark)"]
 */
export type cssPropAndVar = [keyof StyleProps, string];

export function getStylePropCssVar(
  propKey: string,
  propValue: string | number
): cssPropAndVar | false {
  const allStyleProps = getAllStyleProps();
  console.log("allStyleProps", allStyleProps);

  if (!isStyleProp(propKey)) return false;

  const isValueInTheme = isValidThemeValue(
    allStyleProps.propKey.scale,
    propValue
  );

  if (!isValueInTheme) {
    throwWarning("invalidThemeValue", [
      allStyleProps[propKey].scale,
      propValue,
    ]);
  }

  const CSSVarFunctionString = getCSSVarFunctionString(
    allStyleProps[propKey].scale,
    propValue
  );

  if (!CSSVarFunctionString) return false;

  return [allStyleProps[propKey].property, CSSVarFunctionString];
}

/**
 * Theme CSS var tools
 */

/**
 * Validates that a given themeKey and themeValueKey are found within the theme
 */
export function isValidThemeValue(
  themeKey: keyof themeType,
  themeValueKey: keyof themeValue
): boolean {
  // if (!theme.themeKey) return false;
  // if (!theme.themeKey.themeKeyValue) return false;
  // return true;
  return Boolean(theme?.[themeKey]?.[themeValueKey]);
}

/**
 * Contains the "template" for generating CSS variables given a themeKey and themeValueKey
 * Returns a string
 */
export function getCSSVarName(
  themeKey: keyof themeType,
  themeValueKey: keyof themeValue
): false | string {
  if (!isValidThemeValue(themeKey, themeValueKey)) return false;
  return `--rh-${themeKey}-${themeValueKey}`.replace(/\./gi, "_");
}

/**
 * Returns a value from the theme given a themeKey and themeValueKey
 */
export function getThemeValue(
  themeKey: keyof themeType,
  themeValueKey: keyof themeValue
): false | string | number {
  if (!isValidThemeValue(themeKey, themeValueKey)) return false;
  const themeValue = theme[themeKey][themeValueKey];
  return themeValue;
}

/**
 * Returns a CSS value - using CSS var function
 */
export function getCSSVarFunctionString(
  themeKey: keyof themeType,
  themeValueKey: string
): false | string {
  if (!isValidThemeValue(themeKey, themeValueKey)) return false;
  const varName = getCSSVarName(themeKey, themeValueKey);
  return `var(${varName})`;
}

/**
 * Return a string representing a CSS property/value. (using CSS var function)
 */
export function getThemeRuleCSSVarString(
  themeKey: keyof themeType,
  themeValueKey: string
): false | string {
  if (!isValidThemeValue(themeKey, themeValueKey)) return false;

  const varName = getCSSVarName(themeKey, themeValueKey);
  const varValue = getThemeValue(themeKey, themeValueKey);

  return `${varName}: ${varValue};`;
}

/**
 * Returns an array of CSS variables generated by the theme
 */
export function getThemeCSSVars() {
  let cssVars = [];
  for (let themeKey in theme) {
    for (let themeValueKey in theme[themeKey]) {
      const rule = getThemeRuleCSSVarString(themeKey, themeValueKey);
      cssVars.push(rule);
    }
  }
  return cssVars;
}

/**
 * Playing around...
 */
const generateErrorMessage = (
  staticTags: TemplateStringsArray,
  ...tags: string[]
) => {
  let str = [staticTags[0]];
  for (let i = 0; i < tags.length; i++) {
    str.push(tags[i] + staticTags[i + 1]);
  }
  return str.join("");
};

/**
 * Error Messages
 */
interface getErrorMessagePropTypes {
  [x: string]: Function;
}

const getErrorMessage: getErrorMessagePropTypes = {
  invalidStyleProp: (values: string[]) => {
    const [styleProp] = values;
    return generateErrorMessage`Invalid style prop ${styleProp}.`;
  },
  invalidThemeValue: (values: string[]) => {
    const [themeScale, themeValue] = values;
    return generateErrorMessage`Theme value "${themeValue}" not found in "${themeScale}".`;
  },
};

const throwWarning = (
  errorType: keyof getErrorMessagePropTypes,
  values: string[]
) => {
  const message = getErrorMessage[errorType](values);
  console.warn(`WARNING: ${message}`);
};

/**
 * TODO: Add psuedo selectors
 *
 * @chakra-ui/styled-system/src/pseudos.ts
 */
